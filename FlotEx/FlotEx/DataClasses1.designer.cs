#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FlotEx
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FISHCO")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertBank(Bank instance);
    partial void UpdateBank(Bank instance);
    partial void DeleteBank(Bank instance);
    partial void InsertBankAttend(BankAttend instance);
    partial void UpdateBankAttend(BankAttend instance);
    partial void DeleteBankAttend(BankAttend instance);
    partial void InsertBoats(Boats instance);
    partial void UpdateBoats(Boats instance);
    partial void DeleteBoats(Boats instance);
    partial void InsertBoatType(BoatType instance);
    partial void UpdateBoatType(BoatType instance);
    partial void DeleteBoatType(BoatType instance);
    partial void InsertDisplacement(Displacement instance);
    partial void UpdateDisplacement(Displacement instance);
    partial void DeleteDisplacement(Displacement instance);
    partial void InsertCommand(Command instance);
    partial void UpdateCommand(Command instance);
    partial void DeleteCommand(Command instance);
    partial void InsertCities(Cities instance);
    partial void UpdateCities(Cities instance);
    partial void DeleteCities(Cities instance);
    partial void InsertCruise(Cruise instance);
    partial void UpdateCruise(Cruise instance);
    partial void DeleteCruise(Cruise instance);
    partial void InsertFish(Fish instance);
    partial void UpdateFish(Fish instance);
    partial void DeleteFish(Fish instance);
    partial void InsertFishing(Fishing instance);
    partial void UpdateFishing(Fishing instance);
    partial void DeleteFishing(Fishing instance);
    partial void InsertPosition(Position instance);
    partial void UpdatePosition(Position instance);
    partial void DeletePosition(Position instance);
    partial void InsertQuality(Quality instance);
    partial void UpdateQuality(Quality instance);
    partial void DeleteQuality(Quality instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::FlotEx.Properties.Settings.Default.FISHCOConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Bank> Bank
		{
			get
			{
				return this.GetTable<Bank>();
			}
		}
		
		public System.Data.Linq.Table<BankAttend> BankAttend
		{
			get
			{
				return this.GetTable<BankAttend>();
			}
		}
		
		public System.Data.Linq.Table<Boats> Boats
		{
			get
			{
				return this.GetTable<Boats>();
			}
		}
		
		public System.Data.Linq.Table<BoatType> BoatType
		{
			get
			{
				return this.GetTable<BoatType>();
			}
		}
		
		public System.Data.Linq.Table<Displacement> Displacement
		{
			get
			{
				return this.GetTable<Displacement>();
			}
		}
		
		public System.Data.Linq.Table<Command> Command
		{
			get
			{
				return this.GetTable<Command>();
			}
		}
		
		public System.Data.Linq.Table<Cities> Cities
		{
			get
			{
				return this.GetTable<Cities>();
			}
		}
		
		public System.Data.Linq.Table<Cruise> Cruise
		{
			get
			{
				return this.GetTable<Cruise>();
			}
		}
		
		public System.Data.Linq.Table<Fish> Fish
		{
			get
			{
				return this.GetTable<Fish>();
			}
		}
		
		public System.Data.Linq.Table<Fishing> Fishing
		{
			get
			{
				return this.GetTable<Fishing>();
			}
		}
		
		public System.Data.Linq.Table<Position> Position
		{
			get
			{
				return this.GetTable<Position>();
			}
		}
		
		public System.Data.Linq.Table<Quality> Quality
		{
			get
			{
				return this.GetTable<Quality>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bank")]
	public partial class Bank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NAME;
		
		private EntitySet<BankAttend> _BankAttend;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    #endregion
		
		public Bank()
		{
			this._BankAttend = new EntitySet<BankAttend>(new Action<BankAttend>(this.attach_BankAttend), new Action<BankAttend>(this.detach_BankAttend));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_BankAttend", Storage="_BankAttend", ThisKey="ID", OtherKey="ID_BANK")]
		public EntitySet<BankAttend> BankAttend
		{
			get
			{
				return this._BankAttend;
			}
			set
			{
				this._BankAttend.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BankAttend(BankAttend entity)
		{
			this.SendPropertyChanging();
			entity.Bank = this;
		}
		
		private void detach_BankAttend(BankAttend entity)
		{
			this.SendPropertyChanging();
			entity.Bank = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BankAttend")]
	public partial class BankAttend : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ID_BANK;
		
		private int _ID_CRUISE;
		
		private System.DateTime _ENTRY;
		
		private System.DateTime _OUTBANK;
		
		private EntitySet<Fishing> _Fishing;
		
		private EntityRef<Bank> _Bank;
		
		private EntityRef<Cruise> _Cruise;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnID_BANKChanging(int value);
    partial void OnID_BANKChanged();
    partial void OnID_CRUISEChanging(int value);
    partial void OnID_CRUISEChanged();
    partial void OnENTRYChanging(System.DateTime value);
    partial void OnENTRYChanged();
    partial void OnOUTBANKChanging(System.DateTime value);
    partial void OnOUTBANKChanged();
    #endregion
		
		public BankAttend()
		{
			this._Fishing = new EntitySet<Fishing>(new Action<Fishing>(this.attach_Fishing), new Action<Fishing>(this.detach_Fishing));
			this._Bank = default(EntityRef<Bank>);
			this._Cruise = default(EntityRef<Cruise>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_BANK", DbType="Int NOT NULL")]
		public int ID_BANK
		{
			get
			{
				return this._ID_BANK;
			}
			set
			{
				if ((this._ID_BANK != value))
				{
					if (this._Bank.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_BANKChanging(value);
					this.SendPropertyChanging();
					this._ID_BANK = value;
					this.SendPropertyChanged("ID_BANK");
					this.OnID_BANKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_CRUISE", DbType="Int NOT NULL")]
		public int ID_CRUISE
		{
			get
			{
				return this._ID_CRUISE;
			}
			set
			{
				if ((this._ID_CRUISE != value))
				{
					if (this._Cruise.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_CRUISEChanging(value);
					this.SendPropertyChanging();
					this._ID_CRUISE = value;
					this.SendPropertyChanged("ID_CRUISE");
					this.OnID_CRUISEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ENTRY", DbType="Date NOT NULL")]
		public System.DateTime ENTRY
		{
			get
			{
				return this._ENTRY;
			}
			set
			{
				if ((this._ENTRY != value))
				{
					this.OnENTRYChanging(value);
					this.SendPropertyChanging();
					this._ENTRY = value;
					this.SendPropertyChanged("ENTRY");
					this.OnENTRYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OUTBANK", DbType="Date NOT NULL")]
		public System.DateTime OUTBANK
		{
			get
			{
				return this._OUTBANK;
			}
			set
			{
				if ((this._OUTBANK != value))
				{
					this.OnOUTBANKChanging(value);
					this.SendPropertyChanging();
					this._OUTBANK = value;
					this.SendPropertyChanged("OUTBANK");
					this.OnOUTBANKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BankAttend_Fishing", Storage="_Fishing", ThisKey="ID", OtherKey="ID_BANKATTEND")]
		public EntitySet<Fishing> Fishing
		{
			get
			{
				return this._Fishing;
			}
			set
			{
				this._Fishing.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_BankAttend", Storage="_Bank", ThisKey="ID_BANK", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Bank Bank
		{
			get
			{
				return this._Bank.Entity;
			}
			set
			{
				Bank previousValue = this._Bank.Entity;
				if (((previousValue != value) 
							|| (this._Bank.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bank.Entity = null;
						previousValue.BankAttend.Remove(this);
					}
					this._Bank.Entity = value;
					if ((value != null))
					{
						value.BankAttend.Add(this);
						this._ID_BANK = value.ID;
					}
					else
					{
						this._ID_BANK = default(int);
					}
					this.SendPropertyChanged("Bank");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cruise_BankAttend", Storage="_Cruise", ThisKey="ID_CRUISE", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Cruise Cruise
		{
			get
			{
				return this._Cruise.Entity;
			}
			set
			{
				Cruise previousValue = this._Cruise.Entity;
				if (((previousValue != value) 
							|| (this._Cruise.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cruise.Entity = null;
						previousValue.BankAttend.Remove(this);
					}
					this._Cruise.Entity = value;
					if ((value != null))
					{
						value.BankAttend.Add(this);
						this._ID_CRUISE = value.ID;
					}
					else
					{
						this._ID_CRUISE = default(int);
					}
					this.SendPropertyChanged("Cruise");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Fishing(Fishing entity)
		{
			this.SendPropertyChanging();
			entity.BankAttend = this;
		}
		
		private void detach_Fishing(Fishing entity)
		{
			this.SendPropertyChanging();
			entity.BankAttend = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Boats")]
	public partial class Boats : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NAME;
		
		private int _ID_TYPE;
		
		private int _ID_DISPLACE;
		
		private System.DateTime _CONSTRDATE;
		
		private EntitySet<Cruise> _Cruise;
		
		private EntityRef<BoatType> _BoatType;
		
		private EntityRef<Displacement> _Displacement;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnID_TYPEChanging(int value);
    partial void OnID_TYPEChanged();
    partial void OnID_DISPLACEChanging(int value);
    partial void OnID_DISPLACEChanged();
    partial void OnCONSTRDATEChanging(System.DateTime value);
    partial void OnCONSTRDATEChanged();
    #endregion
		
		public Boats()
		{
			this._Cruise = new EntitySet<Cruise>(new Action<Cruise>(this.attach_Cruise), new Action<Cruise>(this.detach_Cruise));
			this._BoatType = default(EntityRef<BoatType>);
			this._Displacement = default(EntityRef<Displacement>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_TYPE", DbType="Int NOT NULL")]
		public int ID_TYPE
		{
			get
			{
				return this._ID_TYPE;
			}
			set
			{
				if ((this._ID_TYPE != value))
				{
					if (this._BoatType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_TYPEChanging(value);
					this.SendPropertyChanging();
					this._ID_TYPE = value;
					this.SendPropertyChanged("ID_TYPE");
					this.OnID_TYPEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_DISPLACE", DbType="Int NOT NULL")]
		public int ID_DISPLACE
		{
			get
			{
				return this._ID_DISPLACE;
			}
			set
			{
				if ((this._ID_DISPLACE != value))
				{
					if (this._Displacement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_DISPLACEChanging(value);
					this.SendPropertyChanging();
					this._ID_DISPLACE = value;
					this.SendPropertyChanged("ID_DISPLACE");
					this.OnID_DISPLACEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CONSTRDATE", DbType="Date NOT NULL")]
		public System.DateTime CONSTRDATE
		{
			get
			{
				return this._CONSTRDATE;
			}
			set
			{
				if ((this._CONSTRDATE != value))
				{
					this.OnCONSTRDATEChanging(value);
					this.SendPropertyChanging();
					this._CONSTRDATE = value;
					this.SendPropertyChanged("CONSTRDATE");
					this.OnCONSTRDATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Boats_Cruise", Storage="_Cruise", ThisKey="ID", OtherKey="ID_BOAT")]
		public EntitySet<Cruise> Cruise
		{
			get
			{
				return this._Cruise;
			}
			set
			{
				this._Cruise.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BoatType_Boats", Storage="_BoatType", ThisKey="ID_TYPE", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public BoatType BoatType
		{
			get
			{
				return this._BoatType.Entity;
			}
			set
			{
				BoatType previousValue = this._BoatType.Entity;
				if (((previousValue != value) 
							|| (this._BoatType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BoatType.Entity = null;
						previousValue.Boats.Remove(this);
					}
					this._BoatType.Entity = value;
					if ((value != null))
					{
						value.Boats.Add(this);
						this._ID_TYPE = value.ID;
					}
					else
					{
						this._ID_TYPE = default(int);
					}
					this.SendPropertyChanged("BoatType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Displacement_Boats", Storage="_Displacement", ThisKey="ID_DISPLACE", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Displacement Displacement
		{
			get
			{
				return this._Displacement.Entity;
			}
			set
			{
				Displacement previousValue = this._Displacement.Entity;
				if (((previousValue != value) 
							|| (this._Displacement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Displacement.Entity = null;
						previousValue.Boats.Remove(this);
					}
					this._Displacement.Entity = value;
					if ((value != null))
					{
						value.Boats.Add(this);
						this._ID_DISPLACE = value.ID;
					}
					else
					{
						this._ID_DISPLACE = default(int);
					}
					this.SendPropertyChanged("Displacement");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cruise(Cruise entity)
		{
			this.SendPropertyChanging();
			entity.Boats = this;
		}
		
		private void detach_Cruise(Cruise entity)
		{
			this.SendPropertyChanging();
			entity.Boats = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BoatType")]
	public partial class BoatType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NAME;
		
		private EntitySet<Boats> _Boats;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    #endregion
		
		public BoatType()
		{
			this._Boats = new EntitySet<Boats>(new Action<Boats>(this.attach_Boats), new Action<Boats>(this.detach_Boats));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BoatType_Boats", Storage="_Boats", ThisKey="ID", OtherKey="ID_TYPE")]
		public EntitySet<Boats> Boats
		{
			get
			{
				return this._Boats;
			}
			set
			{
				this._Boats.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Boats(Boats entity)
		{
			this.SendPropertyChanging();
			entity.BoatType = this;
		}
		
		private void detach_Boats(Boats entity)
		{
			this.SendPropertyChanging();
			entity.BoatType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Displacement")]
	public partial class Displacement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NAME;
		
		private EntitySet<Boats> _Boats;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    #endregion
		
		public Displacement()
		{
			this._Boats = new EntitySet<Boats>(new Action<Boats>(this.attach_Boats), new Action<Boats>(this.detach_Boats));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Displacement_Boats", Storage="_Boats", ThisKey="ID", OtherKey="ID_DISPLACE")]
		public EntitySet<Boats> Boats
		{
			get
			{
				return this._Boats;
			}
			set
			{
				this._Boats.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Boats(Boats entity)
		{
			this.SendPropertyChanging();
			entity.Displacement = this;
		}
		
		private void detach_Boats(Boats entity)
		{
			this.SendPropertyChanging();
			entity.Displacement = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Command")]
	public partial class Command : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FIRSTNAME;
		
		private string _LASTNAME;
		
		private int _ID_POS;
		
		private int _ID_CAP;
		
		private int _ID_CITY;
		
		private string _ADDRESS;
		
		private EntitySet<Cruise> _Cruise;
		
		private EntityRef<Cities> _Cities;
		
		private EntityRef<Position> _Position;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFIRSTNAMEChanging(string value);
    partial void OnFIRSTNAMEChanged();
    partial void OnLASTNAMEChanging(string value);
    partial void OnLASTNAMEChanged();
    partial void OnID_POSChanging(int value);
    partial void OnID_POSChanged();
    partial void OnID_CAPChanging(int value);
    partial void OnID_CAPChanged();
    partial void OnID_CITYChanging(int value);
    partial void OnID_CITYChanged();
    partial void OnADDRESSChanging(string value);
    partial void OnADDRESSChanged();
    #endregion
		
		public Command()
		{
			this._Cruise = new EntitySet<Cruise>(new Action<Cruise>(this.attach_Cruise), new Action<Cruise>(this.detach_Cruise));
			this._Cities = default(EntityRef<Cities>);
			this._Position = default(EntityRef<Position>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FIRSTNAME", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string FIRSTNAME
		{
			get
			{
				return this._FIRSTNAME;
			}
			set
			{
				if ((this._FIRSTNAME != value))
				{
					this.OnFIRSTNAMEChanging(value);
					this.SendPropertyChanging();
					this._FIRSTNAME = value;
					this.SendPropertyChanged("FIRSTNAME");
					this.OnFIRSTNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LASTNAME", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string LASTNAME
		{
			get
			{
				return this._LASTNAME;
			}
			set
			{
				if ((this._LASTNAME != value))
				{
					this.OnLASTNAMEChanging(value);
					this.SendPropertyChanging();
					this._LASTNAME = value;
					this.SendPropertyChanged("LASTNAME");
					this.OnLASTNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_POS", DbType="Int NOT NULL")]
		public int ID_POS
		{
			get
			{
				return this._ID_POS;
			}
			set
			{
				if ((this._ID_POS != value))
				{
					if (this._Position.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_POSChanging(value);
					this.SendPropertyChanging();
					this._ID_POS = value;
					this.SendPropertyChanged("ID_POS");
					this.OnID_POSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_CAP", DbType="Int NOT NULL")]
		public int ID_CAP
		{
			get
			{
				return this._ID_CAP;
			}
			set
			{
				if ((this._ID_CAP != value))
				{
					this.OnID_CAPChanging(value);
					this.SendPropertyChanging();
					this._ID_CAP = value;
					this.SendPropertyChanged("ID_CAP");
					this.OnID_CAPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_CITY", DbType="Int NOT NULL")]
		public int ID_CITY
		{
			get
			{
				return this._ID_CITY;
			}
			set
			{
				if ((this._ID_CITY != value))
				{
					if (this._Cities.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_CITYChanging(value);
					this.SendPropertyChanging();
					this._ID_CITY = value;
					this.SendPropertyChanged("ID_CITY");
					this.OnID_CITYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADDRESS", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string ADDRESS
		{
			get
			{
				return this._ADDRESS;
			}
			set
			{
				if ((this._ADDRESS != value))
				{
					this.OnADDRESSChanging(value);
					this.SendPropertyChanging();
					this._ADDRESS = value;
					this.SendPropertyChanged("ADDRESS");
					this.OnADDRESSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Command_Cruise", Storage="_Cruise", ThisKey="ID", OtherKey="ID_CAP")]
		public EntitySet<Cruise> Cruise
		{
			get
			{
				return this._Cruise;
			}
			set
			{
				this._Cruise.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cities_Command", Storage="_Cities", ThisKey="ID_CITY", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Cities Cities
		{
			get
			{
				return this._Cities.Entity;
			}
			set
			{
				Cities previousValue = this._Cities.Entity;
				if (((previousValue != value) 
							|| (this._Cities.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cities.Entity = null;
						previousValue.Command.Remove(this);
					}
					this._Cities.Entity = value;
					if ((value != null))
					{
						value.Command.Add(this);
						this._ID_CITY = value.ID;
					}
					else
					{
						this._ID_CITY = default(int);
					}
					this.SendPropertyChanged("Cities");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_Command", Storage="_Position", ThisKey="ID_POS", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Position Position
		{
			get
			{
				return this._Position.Entity;
			}
			set
			{
				Position previousValue = this._Position.Entity;
				if (((previousValue != value) 
							|| (this._Position.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Position.Entity = null;
						previousValue.Command.Remove(this);
					}
					this._Position.Entity = value;
					if ((value != null))
					{
						value.Command.Add(this);
						this._ID_POS = value.ID;
					}
					else
					{
						this._ID_POS = default(int);
					}
					this.SendPropertyChanged("Position");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cruise(Cruise entity)
		{
			this.SendPropertyChanging();
			entity.Command = this;
		}
		
		private void detach_Cruise(Cruise entity)
		{
			this.SendPropertyChanging();
			entity.Command = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cities")]
	public partial class Cities : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _CITY;
		
		private EntitySet<Command> _Command;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCITYChanging(string value);
    partial void OnCITYChanged();
    #endregion
		
		public Cities()
		{
			this._Command = new EntitySet<Command>(new Action<Command>(this.attach_Command), new Action<Command>(this.detach_Command));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CITY", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string CITY
		{
			get
			{
				return this._CITY;
			}
			set
			{
				if ((this._CITY != value))
				{
					this.OnCITYChanging(value);
					this.SendPropertyChanging();
					this._CITY = value;
					this.SendPropertyChanged("CITY");
					this.OnCITYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cities_Command", Storage="_Command", ThisKey="ID", OtherKey="ID_CITY")]
		public EntitySet<Command> Command
		{
			get
			{
				return this._Command;
			}
			set
			{
				this._Command.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Command(Command entity)
		{
			this.SendPropertyChanging();
			entity.Cities = this;
		}
		
		private void detach_Command(Command entity)
		{
			this.SendPropertyChanging();
			entity.Cities = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cruise")]
	public partial class Cruise : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ID_BOAT;
		
		private int _ID_CAP;
		
		private System.DateTime _ARRIVAL;
		
		private System.DateTime _DEPART;
		
		private EntitySet<BankAttend> _BankAttend;
		
		private EntityRef<Boats> _Boats;
		
		private EntityRef<Command> _Command;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnID_BOATChanging(int value);
    partial void OnID_BOATChanged();
    partial void OnID_CAPChanging(int value);
    partial void OnID_CAPChanged();
    partial void OnARRIVALChanging(System.DateTime value);
    partial void OnARRIVALChanged();
    partial void OnDEPARTChanging(System.DateTime value);
    partial void OnDEPARTChanged();
    #endregion
		
		public Cruise()
		{
			this._BankAttend = new EntitySet<BankAttend>(new Action<BankAttend>(this.attach_BankAttend), new Action<BankAttend>(this.detach_BankAttend));
			this._Boats = default(EntityRef<Boats>);
			this._Command = default(EntityRef<Command>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_BOAT", DbType="Int NOT NULL")]
		public int ID_BOAT
		{
			get
			{
				return this._ID_BOAT;
			}
			set
			{
				if ((this._ID_BOAT != value))
				{
					if (this._Boats.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_BOATChanging(value);
					this.SendPropertyChanging();
					this._ID_BOAT = value;
					this.SendPropertyChanged("ID_BOAT");
					this.OnID_BOATChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_CAP", DbType="Int NOT NULL")]
		public int ID_CAP
		{
			get
			{
				return this._ID_CAP;
			}
			set
			{
				if ((this._ID_CAP != value))
				{
					if (this._Command.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_CAPChanging(value);
					this.SendPropertyChanging();
					this._ID_CAP = value;
					this.SendPropertyChanged("ID_CAP");
					this.OnID_CAPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ARRIVAL", DbType="Date NOT NULL")]
		public System.DateTime ARRIVAL
		{
			get
			{
				return this._ARRIVAL;
			}
			set
			{
				if ((this._ARRIVAL != value))
				{
					this.OnARRIVALChanging(value);
					this.SendPropertyChanging();
					this._ARRIVAL = value;
					this.SendPropertyChanged("ARRIVAL");
					this.OnARRIVALChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DEPART", DbType="Date NOT NULL")]
		public System.DateTime DEPART
		{
			get
			{
				return this._DEPART;
			}
			set
			{
				if ((this._DEPART != value))
				{
					this.OnDEPARTChanging(value);
					this.SendPropertyChanging();
					this._DEPART = value;
					this.SendPropertyChanged("DEPART");
					this.OnDEPARTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cruise_BankAttend", Storage="_BankAttend", ThisKey="ID", OtherKey="ID_CRUISE")]
		public EntitySet<BankAttend> BankAttend
		{
			get
			{
				return this._BankAttend;
			}
			set
			{
				this._BankAttend.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Boats_Cruise", Storage="_Boats", ThisKey="ID_BOAT", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Boats Boats
		{
			get
			{
				return this._Boats.Entity;
			}
			set
			{
				Boats previousValue = this._Boats.Entity;
				if (((previousValue != value) 
							|| (this._Boats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Boats.Entity = null;
						previousValue.Cruise.Remove(this);
					}
					this._Boats.Entity = value;
					if ((value != null))
					{
						value.Cruise.Add(this);
						this._ID_BOAT = value.ID;
					}
					else
					{
						this._ID_BOAT = default(int);
					}
					this.SendPropertyChanged("Boats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Command_Cruise", Storage="_Command", ThisKey="ID_CAP", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Command Command
		{
			get
			{
				return this._Command.Entity;
			}
			set
			{
				Command previousValue = this._Command.Entity;
				if (((previousValue != value) 
							|| (this._Command.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Command.Entity = null;
						previousValue.Cruise.Remove(this);
					}
					this._Command.Entity = value;
					if ((value != null))
					{
						value.Cruise.Add(this);
						this._ID_CAP = value.ID;
					}
					else
					{
						this._ID_CAP = default(int);
					}
					this.SendPropertyChanged("Command");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BankAttend(BankAttend entity)
		{
			this.SendPropertyChanging();
			entity.Cruise = this;
		}
		
		private void detach_BankAttend(BankAttend entity)
		{
			this.SendPropertyChanging();
			entity.Cruise = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Fish")]
	public partial class Fish : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NAME;
		
		private EntitySet<Fishing> _Fishing;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    #endregion
		
		public Fish()
		{
			this._Fishing = new EntitySet<Fishing>(new Action<Fishing>(this.attach_Fishing), new Action<Fishing>(this.detach_Fishing));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fish_Fishing", Storage="_Fishing", ThisKey="ID", OtherKey="ID_FISH")]
		public EntitySet<Fishing> Fishing
		{
			get
			{
				return this._Fishing;
			}
			set
			{
				this._Fishing.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Fishing(Fishing entity)
		{
			this.SendPropertyChanging();
			entity.Fish = this;
		}
		
		private void detach_Fishing(Fishing entity)
		{
			this.SendPropertyChanging();
			entity.Fish = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Fishing")]
	public partial class Fishing : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ID_BANKATTEND;
		
		private int _ID_FISH;
		
		private int _WEIGHT;
		
		private int _ID_Q;
		
		private EntityRef<BankAttend> _BankAttend;
		
		private EntityRef<Fish> _Fish;
		
		private EntityRef<Quality> _Quality;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnID_BANKATTENDChanging(int value);
    partial void OnID_BANKATTENDChanged();
    partial void OnID_FISHChanging(int value);
    partial void OnID_FISHChanged();
    partial void OnWEIGHTChanging(int value);
    partial void OnWEIGHTChanged();
    partial void OnID_QChanging(int value);
    partial void OnID_QChanged();
    #endregion
		
		public Fishing()
		{
			this._BankAttend = default(EntityRef<BankAttend>);
			this._Fish = default(EntityRef<Fish>);
			this._Quality = default(EntityRef<Quality>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_BANKATTEND", DbType="Int NOT NULL")]
		public int ID_BANKATTEND
		{
			get
			{
				return this._ID_BANKATTEND;
			}
			set
			{
				if ((this._ID_BANKATTEND != value))
				{
					if (this._BankAttend.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_BANKATTENDChanging(value);
					this.SendPropertyChanging();
					this._ID_BANKATTEND = value;
					this.SendPropertyChanged("ID_BANKATTEND");
					this.OnID_BANKATTENDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_FISH", DbType="Int NOT NULL")]
		public int ID_FISH
		{
			get
			{
				return this._ID_FISH;
			}
			set
			{
				if ((this._ID_FISH != value))
				{
					if (this._Fish.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_FISHChanging(value);
					this.SendPropertyChanging();
					this._ID_FISH = value;
					this.SendPropertyChanged("ID_FISH");
					this.OnID_FISHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WEIGHT", DbType="Int NOT NULL")]
		public int WEIGHT
		{
			get
			{
				return this._WEIGHT;
			}
			set
			{
				if ((this._WEIGHT != value))
				{
					this.OnWEIGHTChanging(value);
					this.SendPropertyChanging();
					this._WEIGHT = value;
					this.SendPropertyChanged("WEIGHT");
					this.OnWEIGHTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Q", DbType="Int NOT NULL")]
		public int ID_Q
		{
			get
			{
				return this._ID_Q;
			}
			set
			{
				if ((this._ID_Q != value))
				{
					if (this._Quality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_QChanging(value);
					this.SendPropertyChanging();
					this._ID_Q = value;
					this.SendPropertyChanged("ID_Q");
					this.OnID_QChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BankAttend_Fishing", Storage="_BankAttend", ThisKey="ID_BANKATTEND", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public BankAttend BankAttend
		{
			get
			{
				return this._BankAttend.Entity;
			}
			set
			{
				BankAttend previousValue = this._BankAttend.Entity;
				if (((previousValue != value) 
							|| (this._BankAttend.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BankAttend.Entity = null;
						previousValue.Fishing.Remove(this);
					}
					this._BankAttend.Entity = value;
					if ((value != null))
					{
						value.Fishing.Add(this);
						this._ID_BANKATTEND = value.ID;
					}
					else
					{
						this._ID_BANKATTEND = default(int);
					}
					this.SendPropertyChanged("BankAttend");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fish_Fishing", Storage="_Fish", ThisKey="ID_FISH", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Fish Fish
		{
			get
			{
				return this._Fish.Entity;
			}
			set
			{
				Fish previousValue = this._Fish.Entity;
				if (((previousValue != value) 
							|| (this._Fish.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fish.Entity = null;
						previousValue.Fishing.Remove(this);
					}
					this._Fish.Entity = value;
					if ((value != null))
					{
						value.Fishing.Add(this);
						this._ID_FISH = value.ID;
					}
					else
					{
						this._ID_FISH = default(int);
					}
					this.SendPropertyChanged("Fish");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quality_Fishing", Storage="_Quality", ThisKey="ID_Q", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Quality Quality
		{
			get
			{
				return this._Quality.Entity;
			}
			set
			{
				Quality previousValue = this._Quality.Entity;
				if (((previousValue != value) 
							|| (this._Quality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Quality.Entity = null;
						previousValue.Fishing.Remove(this);
					}
					this._Quality.Entity = value;
					if ((value != null))
					{
						value.Fishing.Add(this);
						this._ID_Q = value.ID;
					}
					else
					{
						this._ID_Q = default(int);
					}
					this.SendPropertyChanged("Quality");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Position")]
	public partial class Position : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NAME;
		
		private EntitySet<Command> _Command;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    #endregion
		
		public Position()
		{
			this._Command = new EntitySet<Command>(new Action<Command>(this.attach_Command), new Action<Command>(this.detach_Command));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_Command", Storage="_Command", ThisKey="ID", OtherKey="ID_POS")]
		public EntitySet<Command> Command
		{
			get
			{
				return this._Command;
			}
			set
			{
				this._Command.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Command(Command entity)
		{
			this.SendPropertyChanging();
			entity.Position = this;
		}
		
		private void detach_Command(Command entity)
		{
			this.SendPropertyChanging();
			entity.Position = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Quality")]
	public partial class Quality : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NAME;
		
		private EntitySet<Fishing> _Fishing;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    #endregion
		
		public Quality()
		{
			this._Fishing = new EntitySet<Fishing>(new Action<Fishing>(this.attach_Fishing), new Action<Fishing>(this.detach_Fishing));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quality_Fishing", Storage="_Fishing", ThisKey="ID", OtherKey="ID_Q")]
		public EntitySet<Fishing> Fishing
		{
			get
			{
				return this._Fishing;
			}
			set
			{
				this._Fishing.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Fishing(Fishing entity)
		{
			this.SendPropertyChanging();
			entity.Quality = this;
		}
		
		private void detach_Fishing(Fishing entity)
		{
			this.SendPropertyChanging();
			entity.Quality = null;
		}
	}
}
#pragma warning restore 1591
